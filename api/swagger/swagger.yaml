swagger: "2.0"
info:
  version: "0.0.1"
  title: NRTS PRC API
host: localhost:3000
basePath: /api
tags:
- name: "login"
  description: "Everything about Logging In"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "application"
  description: "Operations about Applications"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "document"
  description: "Operations about Documents"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "organization"
  description: "Operations about Organizations"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "user"
  description: "Operations about Users"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "search"
  description: "Operations about Searching"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "decision"
  description: "Operations about Decisions"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "comment"
  description: "Operations about Comments"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "commentperiod"
  description: "Operations about Comment Periods"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json

definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"

### Application Definitions
  AppId:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
  AppObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
      tags:
        type: string
        example: "[['public']]"
        ## TODO: Add more fields here.
  Application:
    type: string
    description: "Optional fields to return"
    example: name|type
    #TODO: Fix enums
    enum: &applicationFields
      - agency
      - cl_file
      - client
      - description
      - internal
      - internalID
      - latitude
      - legalDescription
      - longitude
      - name
      - postID
      - publishDate
      - purpose
      - region
      - status
      - subpurpose
      - tantalisID
    enum: &applicationRegions
      - CA
      - KO
      - LM
      - OM
      - PE
      - SK
      - SI
      - VI
    enum: &applicationCpStatuses
      - NS
      - NO
      - CL
      - OP
    enum: &applicationStatuses
      - AB
      - AC
      - AL
      - CA
      - DI
      - DG
      - OA
      - ON
      - OF
      - SU
      - DE
      - UN

### Search Definitions
  crownLandsId:
    type: string
    example: "6406200"
  dtId:
    type: number
    example: "926028"
  SearchObject:
    type: object
    properties:
      _id:
        type: string
        example: "0230191"
  Search:
    type: string
    description: "Optional fields to return"
    example: name
    # TODO: Fix enums
    enum: &searchFields
      - name

### Document Definitions
  DocId:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool display name"
  DocObject:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool display name"
        ## TODO: Add more fields here.
  DocumentFields:
    type: string
    description: "Optional fields to return"
    example: name|type
    #TODO: Fix enums
    enum: &documentFields
      - displayName
      - documentFileName
      - internalURL
      - internalMime

### Comment Definitions
  CommentId:
    type: object
    properties:
      comment:
        type: string
        example: "A cool comment"
  CommentObject:
    type: object
    properties:
      commentAuthor:
        type: object
        example: "A cool comment author"
        ## TODO: Add more fields here.
        properties:
          contactName:
            type: string
            example: "Bob Smith"
          location:
            type: string
            example: "Victoria"
  CommentFields:
    type: string
    description: "Optional fields to return"
    example: name|commentAuthor
    #TODO: Fix enums
    enum: &commentFields
      - commentAuthor
      - comment
      - commentStatus
      - dateAdded
      - _addedBy
  CommentSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +commentStatus,-dateAdded
    enum: &commentSortByFields
      - +commentStatus
      - -commentStatus
      - +contactName
      - -contactName
      - +dateAdded
      - -dateAdded

### Comment Period Definitions
  CommentPeriodId:
    type: object
    properties:
      commentperiod:
        type: string
        example: "A Comment Period ID"
  CommentPeriodObject:
    type: object
    properties:
      _application:
        type: string
        example: ""
      description:
        type: string
        example: "Description of Comment Period"
      internal:
        type: object
        example: "Victoria"
      ## TODO: Add more fields here.
  CommentPeriodFields:
    type: string
    description: "Optional fields to return"
    example: startDate|endDate|description
    #TODO: Fix enums
    enum: &commentPeriodFields
      - startDate
      - endDate
      - description
      - internal
      - _application
      - _addedBy

### Decision Definitions
  DecisionId:
    type: object
    properties:
      name:
        type: string
        example: "Decision Name"
  DecisionObject:
    type: object
    properties:
      name:
        type: string
        example: "Decision Name"
      description:
        type: string
        example: "Description of Decision"
        ## TODO: Add more fields here.
  DecisionFields:
    type: string
    description: "Optional fields to return"
    example: name|type
    #TODO: Fix enums
    enum: &decisionFields
      - name
      - date
      - description
      - _application
      - decisionDate

### Organization Definitions
  OrgId:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
  OrgObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
      tags:
        type: string
        example: "[['public']]"
        ## TODO: Add more fields here.
  Organization:
    type: string
    description: "Optional fields to return"
    example: name|code
    #TODO: Fix enums
    enum: &organizationFields
      - name
      - code

### User Definitions
  UserId:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool display name"
  UserObject:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool display name"

        ## TODO: Add more fields here.
  UserFields:
    type: string
    description: "Optional fields to return"
    example: displayName|roles
    #TODO: Fix enums
    enum: &userFields
      - displayName
      - firstName
      - lastName
      - username
      - roles

### Resource Definitions
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string

### Path Definitions
paths:
  /login/token:
    x-swagger-router-controller: login
    options:
      tags:
        - login
      operationId: loginOptions
      description: "Options for Login"
      summary: "Pre-flight request"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
    post:
      tags:
        - login
      operationId: loginPost
      description: "Get a JWT in order to access certain protected routes"
      summary: "Get a Bearer token"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Application Routes
  /application:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Application Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - application
      summary: "Create a new Application"
      operationId: protectedPost
      description: "Create a new Application object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
      parameters:
        - name: app
          in: body
          required: true
          schema:
            $ref: "#/definitions/AppId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      summary: "Get a list of Applications"
      operationId: protectedGet
      description: "Authenticated access to retrieving Applications"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: fields
          description: "Application fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Applications"
        - in: query
          name: regions
          description: "Regions filter"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationRegions
        - in: query
          name: cpStatuses
          description: "Comment Period statuses filter"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationCpStatuses
        - in: query
          name: statuses
          description: "Application statuses filter"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationStatuses
        - in: query
          name: client
          type: string
          required: false
          description: "Client filter"
        - in: query
          name: cl_file
          type: number
          required: false
          description: "CL File # filter"
        - in: query
          name: tantalisID
          type: number
          required: false
          description: "Tantalis ID filter"
        - in: query
          name: purpose
          type: string
          required: false
          description: "Purpose/subpurpose filter"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number to return ('pageSize' results each)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /application/{appId}:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Application GET Route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      summary: "Get an Application"
      operationId: protectedGet
      description: "Authenticated access to retrieving Applications"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Application fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Applications"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - application
      summary: "Update an Application"
      operationId: protectedPut
      description: "Update an Application object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
      parameters:
        - name: appId
          in: path
          description: "ID of Application to update"
          required: true
          type: "string"
        - name: AppObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/AppObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - application
      summary: "Delete an Application"
      operationId: protectedDelete
      description: "Delete an Application object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: appId
          in: path
          description: "ID of Application to delete"
          required: true
          type: "string"
        - name: AppObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/AppObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /application/{appId}/publish:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Application Publish Route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - application
      summary: "Publish an Application"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to an Application"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
        # TODO: Define publish roles.
      parameters:
        - name: appId
          in: path
          description: "ID of Application to update"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /application/{appId}/unpublish:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Application Unpublish Route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - application
      summary: "Unpublish a Application"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role to an Application"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
        # TODO: Define publish roles.
      parameters:
        - name: appId
          in: path
          description: "ID of Application to update"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/application:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Application Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      summary: "Get a list of public Applications"
      operationId: publicGet
      description: "Retrieving public Applications"
      parameters:
        - in: query
          name: fields
          description: "Application fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: regions
          description: "Regions filter"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationRegions
        - in: query
          name: cpStatuses
          description: "Comment Period statuses filter"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationCpStatuses
        - in: query
          name: statuses
          description: "Application statuses filter"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationStatuses
        - in: query
          name: client
          type: string
          required: false
          description: "Client filter"
        - in: query
          name: cl_file
          type: number
          required: false
          description: "CL File # filter"
        - in: query
          name: tantalisID
          type: number
          required: false
          description: "Tantalis ID filter"
        - in: query
          name: purpose
          type: string
          required: false
          description: "Purpose/subpurpose filter"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/application/{appId}:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Application GET Route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      summary: "Get an Application"
      operationId: publicGet
      description: "Public access to retrieving Applications"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Application fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## Search
  /public/search/bcgw/crownLandsId/{crownLandsId}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Search Route"
      parameters:
        - name: crownLandsId
          in: path
          description: "ID of Crown Tenures to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Get a list of searchable things from the BCGW"
      operationId: publicGetBCGW
      description: "Retrieving Search results"
      parameters:
        - name: crownLandsId
          in: path
          description: "ID of Crown Tenures to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Search fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *searchFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/search/bcgw/getClientsInfoByDispositionId/{dtId}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Search Route"
      parameters:
        - name: dtId
          in: path
          description: "ID of Disposition ID to get client info on"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Get a list of clients associated with this disposition"
      operationId: publicGetClientsInfoByDispositionId
      description: "Returns a list of client(s)"
      parameters:
        - name: dtId
          in: path
          description: "ID of Disposition ID to get client info on"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/search/bcgw/dispositionTransactionId/{dtId}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Search Route"
      parameters:
        - name: dtId
          in: path
          description: "ID of Tantalis Obj to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Get a list of searchable things from the BCGW"
      operationId: publicGetBCGWDispositionTransactionId
      description: "Retrieving Search results"
      parameters:
        - name: dtId
          in: path
          description: "ID of Tantalis Obj to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Search fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *searchFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## Documents
  /document:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - document
      summary: "Create a new Document"
      operationId: protectedPost
      description: "Create a new Document object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          description: "The file to upload"
          required: true
          type: file
        - name: _application
          in: formData
          description: "The Application to bind this Document to"
          required: false
          type: string
        - name: _decision
          in: formData
          description: "The Decision to bind this Document to"
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The Comment to bind this Document to"
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The display name of this Document"
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a list of Documents"
      operationId: protectedGet
      description: "Authenticated access to retrieving Documents"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: _application
          description: "Documents relating to a particular Application(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _decision
          description: "Documents relating to a particular Decision(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _comment
          description: "Documents relating to a particular Comment(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Documents"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a Document"
      operationId: protectedGet
      description: "Authenticated access to retrieving a Document"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "Update/Upload a Document"
      operationId: protectedPut
      description: "Update a Document object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
      consumes:
        - multipart/form-data
      parameters:
        - name: docId
          in: path
          description: "ID of Document to update"
          required: true
          type: "string"
        - name: upfile
          in: formData
          description: "The file to upload"
          required: true
          type: file
        - name: _application
          in: formData
          description: "The Application to bind this Document to"
          required: false
          type: string
        - name: _decision
          in: formData
          description: "The Decision to bind this Document to"
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The Comment to bind this Document to"
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The display name of this Document"
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - document
      summary: "Delete a Document"
      operationId: protectedDelete
      description: "Delete a Document object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
      consumes:
        - application/json
      parameters:
        - name: docId
          in: path
          description: "ID of Document to delete"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/publish:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document Publish Route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "Publish a Document"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a Document"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
        # TODO: Define publish roles.
      parameters:
        - name: docId
          in: path
          description: "ID of Document to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/unpublish:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document Unpublish Route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "Unpublish a Document"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role on a Document"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
        # TODO: Define unpublish roles.
      parameters:
        - name: docId
          in: path
          description: "ID of Document to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/download:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Download Route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Download a Document"
      operationId: protectedDownload
      description: "Authenticated access to retrieving a Document binary"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: docId
          in: path
          description: "ID of Document to download"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - document
      summary: "Create a new Document from public"
      operationId: unProtectedPost
      description: "Create a new Document object from public"
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          description: "The file to upload"
          required: true
          type: file
        - name: _application
          in: formData
          description: "The Application to bind this Document to"
          required: false
          type: string
        - name: _decision
          in: formData
          description: "The Decision to bind this Document to"
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The Comment to bind this Document to"
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The display name of this document"
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a list of Documents"
      operationId: publicGet
      description: "Retrieving public Documents"
      parameters:
        - in: query
          name: _application
          description: "Documents relating to a particular Application(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _decision
          description: "Documents relating to a particular Decision(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _comment
          description: "Documents relating to a particular Comment(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document/{docId}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a Document"
      operationId: publicGet
      description: "Public access to retrieving Documents"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document/{docId}/download:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Download Route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Download a Document"
      operationId: publicDownload
      description: "Authenticated access to retrieving a Document binary"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to download"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
### Organizations
  /organization:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - organization
      summary: "Create an Organization"
      operationId: protectedPost
      description: "Create a new Organization object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:organization
      parameters:
        - name: org
          in: body
          required: true
          schema:
            $ref: "#/definitions/OrgId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - organization
      summary: "Get a list of Organizations"
      operationId: protectedGet
      description: "Authenticated access to retrieving Organizations"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: fields
          description: "Organization fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *organizationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /organization/{orgId}:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization GET Route"
      parameters:
        - name: orgId
          in: path
          description: "ID of Organization to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - organization
      summary: "Get an Organization"
      operationId: protectedGet
      description: "Authenticated access to retrieving an Organization"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: orgId
          in: path
          description: "ID of Organization to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Organization fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *organizationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - organization
      summary: "Update an Organization"
      operationId: protectedPut
      description: "Update an Organization object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:organization
      parameters:
        - name: orgId
          in: path
          description: "ID of Organization to update"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /organization/{orgId}/publish:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization Publish Route"
      parameters:
        - name: orgId
          in: path
          description: "ID of Organization to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - organization
      summary: "Publish an Organization"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to an Organization"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:organization
        # TODO: Define publish roles.
      parameters:
        - name: orgId
          in: path
          description: "ID of Organization to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /organization/{orgId}/unpublish:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization Unpublish Route"
      parameters:
        - name: orgId
          in: path
          description: "ID of Organization to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - organization
      summary: "Unpublish an Organization"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role to an Organization"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:organization
        # TODO: Define publish roles.
      parameters:
        - name: orgId
          in: path
          description: "ID of Organization to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/organization:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - organization
      summary: "Get a list of Organizations"
      operationId: publicGet
      description: "Retrieving public Organizations"
      parameters:
        - in: query
          name: fields
          description: "Organization fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *organizationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/organization/{orgId}:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization GET Route"
      parameters:
        - name: orgId
          in: path
          description: "ID of Organization to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - organization
      summary: "Get an organization"
      operationId: publicGet
      description: "Public access to retrieving Organizations"
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Organization fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *organizationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### User
  /user:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on User Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - user
      summary: "Create a new User"
      operationId: protectedPost
      description: "Create a new User object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - user
      summary: "Get a list of Users"
      operationId: protectedGet
      description: "Authenticated access to retrieving Users"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - in: query
          name: fields
          description: "User fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *userFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /user/{userId}:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on User GET Route"
      parameters:
        - name: userId
          in: path
          description: "ID of User to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - user
      summary: "Get a User"
      operationId: protectedGet
      description: "Authenticated access to retrieving a User"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: userId
          in: path
          description: "ID of User to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "User fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *userFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - user
      summary: "Update a User"
      operationId: protectedPut
      description: "Update a User object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:user
      parameters:
        - name: userId
          in: path
          description: "ID of User to update"
          required: true
          type: "string"
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Decisions
  /decision:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Decision Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - decision
      summary: "Create a Decision"
      operationId: protectedPost
      description: "Create a new Decision object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
      parameters:
        - name: decision
          in: body
          required: true
          schema:
            $ref: "#/definitions/DecisionId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - decision
      summary: "Get a list of Decisions"
      operationId: protectedGet
      description: "Authenticated access to retrieving Decisions"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: fields
          description: "Decision fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *decisionFields
        - in: query
          name: _application
          description: "Decisions relating to a particular Application(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Decisions"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /decision/{decisionId}:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Decision GET Route"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - decision
      summary: "Get a Decision"
      operationId: protectedGet
      description: "Authenticated access to retrieving a Decision"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Decision fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *decisionFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - decision
      summary: "Update a Decision"
      operationId: protectedPut
      description: "Update a Decision object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to update"
          required: true
          type: "string"
        - name: decision
          in: body
          required: true
          schema:
            $ref: "#/definitions/DecisionObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - decision
      summary: "Delete a Decision"
      operationId: protectedDelete
      description: "Delete a Decision object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
      consumes:
        - application/json
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to delete"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /decision/{decisionId}/publish:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Decision Publish Route"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - decision
      summary: "Publish a Decision"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a Decision"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
        # TODO: Define publish roles.
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /decision/{decisionId}/unpublish:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Decision Unpublish Route"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - decision
      summary: "Unpublish a Decision"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role to a Decision"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
        # TODO: Define publish roles.
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/decision:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Decision Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - decision
      summary: "Get a list of Decisions"
      operationId: publicGet
      description: "Retrieving public Decisions"
      parameters:
        - in: query
          name: fields
          description: "Decision fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *decisionFields
        - in: query
          name: _application
          description: "Decisions relating to a particular Application(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/decision/{decisionId}:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Decision GET Route"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - decision
      summary: "Get a Decision"
      operationId: publicGet
      description: "Public access to retrieving Decisions"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Decision fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *decisionFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DecisionObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## Comments
  /comment:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a list of Comments"
      operationId: protectedGet
      description: "Authenticated access to retrieving Comments"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: _commentPeriod
          description: "Comments relating to a particular Comment Period"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Comments"
        - in: query
          name: fields
          description: "Comment fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)"
        - in: query
          name: sortBy
          description: "Comment fields to sort by"
          required: false
          type: array
          items:
            type: string
            enum: *commentSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /comment/{CommentId}:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment GET Route"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a Comment"
      operationId: protectedGet
      description: "Authenticated access to retrieving a Comment"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Comment fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - comment
      summary: "Update/upload a Comment"
      operationId: protectedPut
      description: "Update a Comment object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:comment
      consumes:
        - multipart/form-data
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to update"
          required: true
          type: "string"
        - name: comment
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /comment/{CommentId}/publish:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Publish Route"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - comment
      summary: "Publish a Comment"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a Comment"
      security:
        - Bearer: []
      x-security-scopes:
        - publish:comment
        # TODO: Define publish roles.
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /comment/{CommentId}/unpublish:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Unpublish Route"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - comment
      summary: "Unpublish a Comment"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role on a Comment"
      security:
        - Bearer: []
      x-security-scopes:
        - unpublish:comment
        # TODO: Define unpublish roles.
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/comment:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - comment
      summary: "Create a new Comment"
      operationId: unProtectedPost
      description: "Create a new Comment object"
      parameters:
        - name: comment
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a list of Comments"
      operationId: publicGet
      description: "Retrieving public Comments"
      parameters:
        - in: query
          name: _commentPeriod
          description: "Comments relating to a particular Comment Period"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)"
        - in: query
          name: sortBy
          description: "Comment fields to sort by"
          required: false
          type: array
          items:
            type: string
            enum: *commentSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/comment/{CommentId}:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment GET Route"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a Comment"
      operationId: publicGet
      description: "Public access to retrieving Comments"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Comment fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## CommentPeriods
  /commentperiod:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Period Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - commentperiod
      summary: "Create a new Comment Period"
      operationId: protectedPost
      description: "Create a new Comment Period object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
      parameters:
        - name: _commentPeriod
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentPeriodObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a list of Comment Periods"
      operationId: protectedGet
      description: "Authenticated access to retrieving Comment Periods"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: _application
          description: "Comment Periods relating to a particular Application(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Comment Periods"
        - in: query
          name: fields
          description: "Comment Ceriod fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentPeriodFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /commentperiod/{CommentPeriodId}:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Period GET Route"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a Comment Period"
      operationId: protectedGet
      description: "Authenticated access to retrieving a Comment Period"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: "string"
        - in: query
          name: _application
          description: "Comment Periods relating to a particular Application(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment Period fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "Update/Upload a Comment Period"
      operationId: protectedPut
      description: "Update a Comment Period object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
      consumes:
        - application/json
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to update"
          required: true
          type: "string"
        - name: cp
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentPeriodObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - commentperiod
      summary: "Delete a Comment Period"
      operationId: protectedDelete
      description: "Delete a Comment Period object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
      consumes:
        - application/json
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to delete"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /commentperiod/{CommentPeriodId}/publish:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Period Publish Route"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "Publish a Comment Period"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a Comment Period"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
        # TODO: Define publish roles.
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to publish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /commentperiod/{CommentPeriodId}/unpublish:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Period Unpublish Route"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "Unpublish a Comment Period"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role on a Comment Period"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
        # TODO: Define unpublish roles.
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to unpublish"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/commentperiod:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Period Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a list of Comment Periods"
      operationId: publicGet
      description: "Public access to retrieving Comment Periods"
      parameters:
        - in: query
          name: _application
          description: "Comment Periods relating to a particular Application(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment Period fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentPeriodFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/commentperiod/{CommentPeriodId}:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Period GET Route"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a Comment Period"
      operationId: publicGet
      description: "Public access to retrieving Comment Periods"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Comment Period fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"